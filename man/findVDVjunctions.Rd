% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/findVDVjunctions.R
\name{findVDVjunctions}
\alias{findVDVjunctions}
\title{Find the vector-insert junctions at the beginning and end of a VDV read}
\usage{
findVDVjunctions(
  ReadName = NULL,
  ReadDNA,
  ReadVecAlign,
  RestrictionSite = "G^AATTC",
  VectorSequence = NULL,
  UnalignedVectorLength = 1000L,
  SideSeqSearch = 10L,
  replaceVectorSequence = TRUE
)
}
\arguments{
\item{ReadName}{character string. Name of the read}

\item{ReadDNA}{A DNAString or DNAStringSet with the read sequence}

\item{ReadVecAlign}{Table with the Blast results from aligning the vector on the read}

\item{RestrictionSite}{Character string in the for "G^AATTC" indicating the sequence and the cut site}

\item{VectorSequence}{A DNAString or DNAStringSet of length 1 with the vector sequence starting and ending
with the full sequence of the restriction site used for cloning}

\item{UnalignedVectorLength}{Integer. If more than \code{UnalignedVectorLength}bp of expected vector sequence
is not correctly aligned at the vector-insert junction,
the function will return a message}

\item{SideSeqSearch}{Integer. If the expected restriction site is not found at a vector-insert junction
then the algorithm will try to search for the vector sequence of length
\code{SideSeqSearch} bp that is adjacent to the restriction site
(Default to 10 bp)}

\item{replaceVectorSequence}{Logical. If TRUE, the function will replace the vector sequence in the read
by the true vector sequence, using the junction has been identified.
If no junction is identified, then no sequence is replaced}
}
\value{
a list with the following elements:
   \itemize{
       \item{"ReadName"}{Name of the read}
       \item{"Strand"}{"Strand of the read (based on vector alignment)}
       \item{"InsertStart"}{Location of the first base of insert sequence (if NA, no vector-insert junction has been detected)}
       \item{"InsertEnd"}{Location of the last base of insert sequence (if NA, no vector-insert junction has been detected)}
       \item{"correctedRead"}{(Optional) if \code{replaceVectorSequence} is TRUE, this sequence contains the true vector sequence in the read}
   }
}
\description{
The function does the following:
  \enumerate{
    \item At both ends of the read, search for the restriction site
          at the position where the vector-insert junction is expected to be found
    \item If the restriction site is not found, then search for the vector
          sequence just adjacent to the restriction site in a slighly wider window
    \item (optional) at these junctions, replace the observed vector sequence
          by the full (and true) vector sequence
  }
}
\examples{
# Some dummy sequences (use paste0 for clarity / comparison of sequences):
## Vector sequence start and ends with the HindIII site used for cloning ("A^AGCTT")
vector <- Biostrings::DNAString(paste0(
            "AAGCTTTATTAAGACACCCGGTATGCTTCAGGATCGTTCGGACTAA",
            "ACCGTAACTGCGATATTTTAGGCGTGTTACAAGCTT"))
read <- Biostrings::DNAString(paste0(
            "ACCGTAACTGCGATATTTTAGGCGTGTTACAAGCTT",
            "GCTAGATCGCGCGATATGTG",
            "AAGCTTTATTAAGACACCCGGTATGCTTCAGGATCGTTCGGACTAA"))
noisyread <- Biostrings::DNAString(paste0(
            "ACCGTAACTGCGTTTTTTTAGGCGTGTTACAAGCTT",
            "GCTAAATCGCGCGCTATGTG",
            "GGGCTTTATTAAGACACCCGGTATGCTTTCAGGATCGTTCGGACTAA"))
# Import the blastn results for these sequences (alignment of vector on the reads):
readaln <- readBlast(system.file("extdata",
                                 "juncEx_vec_read.res",
                                 package = "NanoBAC"))
noisyreadaln <- readBlast(system.file("extdata",
                                      "juncEx_vec_noisyread.res",
                                      package = "NanoBAC"))
# Get the coordinates of the insert sequence:
findVDVjunctions("read", read, readaln, "A^AGCTT", vector,
                 replaceVectorSequence = FALSE)
# With the noisy read, the restriction site is not found at
#   the end of the read but an adjacent sequence is:
findVDVjunctions("noisyread", noisyread, noisyreadaln, "A^AGCTT", vector,
                 replaceVectorSequence = FALSE)
# Get the read sequence after replacing the vector sequence
#   by the full vector sequence on both sides
findVDVjunctions("noisyread", noisyread, noisyreadaln, "A^AGCTT", vector,
                 replaceVectorSequence = TRUE)$correctedRead
}
