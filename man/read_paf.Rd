% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_paf.R
\name{read_paf}
\alias{read_paf}
\title{Read a .paf file such as produced by minimap/minimap2.}
\usage{
read_paf(file, max_tags = 20, fix0based = TRUE)
}
\arguments{
\item{file}{Either a path to a file, a connection, or literal data
(either a single string or a raw vector).

Files ending in \code{.gz}, \code{.bz2}, \code{.xz}, or \code{.zip} will
be automatically uncompressed. Files starting with \code{http://},
\code{https://}, \code{ftp://}, or \code{ftps://} will be automatically
downloaded. Remote gz files can also be automatically downloaded and
decompressed.

Literal data is most useful for examples and tests. It must contain at
least one new line to be recognised as data (instead of a path) or be a
vector of greater than length 1.

Using a value of \code{\link[readr:clipboard]{clipboard()}} will read from the system clipboard.}

\item{max_tags}{maximum number of optional fields to include}

\item{fix0based}{Logical. Are the ranges in the paf file 0-based and should they be converted to 1-based (default is TRUE)?}
}
\value{
tibble
}
\description{
This function is only slighly modified from \url{https://raw.githubusercontent.com/thackl/thacklr/master/R/read.R}
    By default, this function corrects the start values to take into account that the paf file is 0-based while R/bioconductor is generally 1-based
}
\examples{
## Example data set:
    Path2paf <- system.file("extdata", "pafFileExample.paf", package = "NanoBAC")
## Import the data (ignore the parsing failures):
   mypaf <- read_paf(Path2paf)

}
